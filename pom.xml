<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.folio</groupId>
  <artifactId>mod-oai-pmh</artifactId>
  <version>3.14.0-SNAPSHOT</version>

  <name>OAI-PMH Repository Business Logic</name>
  <description>Business logic to support the Open Archives Initiative Protocol for Metadata Harvesting</description>
  <url>https://github.com/folio-org/mod-oai-pmh</url>
  <inceptionYear>2018</inceptionYear>

  <organization>
    <name>The Open Library Foundation</name>
    <url>https://dev.folio.org</url>
  </organization>

  <scm>
    <url>https://github.com/folio-org/mod-oai-pmh.git</url>
    <connection>scm:git:git://github.com/folio-org/mod-oai-pmh.git</connection>
    <developerConnection>scm:git:git@github.com:folio-org/mod-oai-pmh.git</developerConnection>
    <tag>v3.4.0</tag>
  </scm>

  <issueManagement>
    <system>JIRA</system>
    <url>https://issues.folio.org/browse/MODOAIPMH</url>
  </issueManagement>

  <ciManagement>
    <system>Jenkins</system>
    <url>https://jenkins-aws.indexdata.com/job/folio-org/job/mod-oai-pmh</url>
  </ciManagement>

  <licenses>
    <license>
      <name>Apache License 2.0</name>
      <url>https://spdx.org/licenses/Apache-2.0</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <repositories>
    <repository>
      <id>folio-nexus</id>
      <name>FOLIO Maven Repository</name>
      <url>https://repository.folio.org/repository/maven-folio</url>
    </repository>
  </repositories>

  <pluginRepositories>
    <pluginRepository>
      <id>folio-nexus</id>
      <name>FOLIO Maven repository</name>
      <url>https://repository.folio.org/repository/maven-folio</url>
    </pluginRepository>
  </pluginRepositories>

  <distributionManagement>
    <repository>
      <id>folio-nexus</id>
      <name>FOLIO Release Repository</name>
      <url>https://repository.folio.org/repository/maven-releases/</url>
      <uniqueVersion>false</uniqueVersion>
      <layout>default</layout>
    </repository>
    <snapshotRepository>
      <id>folio-nexus</id>
      <name>FOLIO Snapshot Repository</name>
      <uniqueVersion>true</uniqueVersion>
      <url>https://repository.folio.org/repository/maven-snapshots/</url>
      <layout>default</layout>
    </snapshotRepository>
  </distributionManagement>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.logging.log4j</groupId>
        <artifactId>log4j-bom</artifactId>
        <version>${log4j.version}</version>
        <scope>import</scope>
        <type>pom</type>
      </dependency>
      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-stack-depchain</artifactId>
        <version>${vertx.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency> <!-- needed for mockserver-client-java -->
        <groupId>io.netty</groupId>
        <artifactId>netty-bom</artifactId>
        <version>${netty.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
      <dependency>
        <groupId>org.testcontainers</groupId>
        <artifactId>testcontainers-bom</artifactId>
        <version>${testcontainers.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <properties>
    <module_name>mod-oai-pmh</module_name>
    <http.port>8081</http.port>
    <ramlfiles_path>${basedir}/ramls</ramlfiles_path>
    <ramlfiles_util_path>${ramlfiles_path}/raml-util</ramlfiles_util_path>

    <java.version>17</java.version>
    <maven.compiler.source>17</maven.compiler.source>
    <maven.compiler.target>17</maven.compiler.target>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <argLine>-Dfile.encoding=UTF-8</argLine>

    <sonar.exclusions>
      **/PropertyNameMapper.java,
      **/ModTenantAPI.java,
      **/SourceStorageSourceRecordsClient.java,
      **/RuleProcessor.java,
      **/GetOaiRecordsHelper.java
    </sonar.exclusions>
    <sonar.coverage.exclusions>
      **/BatchStreamWrapper.java,
      **/ModTenantAPI.java,
      **/SourceStorageSourceRecordsClient.java,
      **/TranslationsFunctionHolder.java,
      **/RuleProcessor.java,
      **/GetOaiRecordsHelper.java
    </sonar.coverage.exclusions>
    <!-- Plugin versions -->
    <aspectj.version>1.9.21.1</aspectj.version>
    <raml-module-builder.version>35.3.0</raml-module-builder.version>
    <folio-liquibase-util.version>1.7.0</folio-liquibase-util.version>
    <data-import-utils.version>1.10.0</data-import-utils.version>
    <folio-di-support.version>2.1.0</folio-di-support.version>
    <vertx.version>4.5.4</vertx.version>
    <apache-httpclient.version>4.5.13</apache-httpclient.version>
    <time-adapters.version>1.1.3</time-adapters.version>
    <jaxb2-basics.version>1.11.1</jaxb2-basics.version>
    <jaxb-api.version>2.3.1</jaxb-api.version>
    <jaxb-impl.version>2.3.4</jaxb-impl.version>
    <jaxb-osgi.version>4.0.3</jaxb-osgi.version>
    <marc4j.version>2.9.5</marc4j.version>
    <mod-configuration-client.version>5.9.2</mod-configuration-client.version>
    <mod-source-record-storage-client.version>5.4.0</mod-source-record-storage-client.version>
    <restassured.version>5.4.0</restassured.version>
    <junit.jupiter.version>5.9.0-M1</junit.jupiter.version>
    <jooq.version>3.19.6</jooq.version>
    <vertx-jooq.generator.version>6.5.4</vertx-jooq.generator.version>
    <vertx-jooq.classic-reactive.version>6.5.4</vertx-jooq.classic-reactive.version>
    <postgres.version>42.7.2</postgres.version>
    <lombok.version>1.18.24</lombok.version>
    <log4j.version>2.23.1</log4j.version>
    <testcontainers.version>1.19.7</testcontainers.version>
    <mockito-junit-jupiter.version>5.2.0</mockito-junit-jupiter.version>
    <junit.version>5.10.2</junit.version>
    <netty.version>4.1.107.Final</netty.version>
    <mockserver-client-java.version>5.15.0</mockserver-client-java.version>
    <generate-marc-utils-version>1.7.0</generate-marc-utils-version>
    <postgres.image>postgres:12-alpine</postgres.image>
    <folio-s3-client.version>2.1.0</folio-s3-client.version>
    <aws.sdk.version>2.19.2</aws.sdk.version>

  </properties>

  <dependencies>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>mod-source-record-storage-client</artifactId>
      <version>${mod-source-record-storage-client.version}</version>
      <type>jar</type>
      <exclusions>
        <exclusion>
          <groupId>javax.ws.rs</groupId>
          <artifactId>jsr311-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>domain-models-runtime</artifactId>
      <version>${raml-module-builder.version}</version>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>domain-models-api-interfaces</artifactId>
      <version>${raml-module-builder.version}</version>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>folio-di-support</artifactId>
      <version>${folio-di-support.version}</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>data-import-utils</artifactId>
      <version>${data-import-utils.version}</version>
      <type>jar</type>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>mod-configuration-client</artifactId>
      <version>${mod-configuration-client.version}</version>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>folio-liquibase-util</artifactId>
      <version> ${folio-liquibase-util.version}</version>
      <type>jar</type>
      <exclusions>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <!-- Jaxb dependencies -->
    <dependency>
      <groupId>com.migesok</groupId>
      <artifactId>jaxb-java-time-adapters</artifactId>
      <version>${time-adapters.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jvnet.jaxb2_commons</groupId>
      <artifactId>jaxb2-basics-runtime</artifactId>
      <version>${jaxb2-basics.version}</version>
    </dependency>

    <!-- we use marc4j for converting marcJson to marcXml -->
    <dependency>
      <groupId>org.marc4j</groupId>
      <artifactId>marc4j</artifactId>
      <version>${marc4j.version}</version>
    </dependency>

    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <version>${apache-httpclient.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jooq</groupId>
      <artifactId>jooq</artifactId>
      <version>${jooq.version}</version>
    </dependency>
    <dependency>
      <groupId>io.github.jklingsporn</groupId>
      <artifactId>vertx-jooq-classic-reactive</artifactId>
      <version>${vertx-jooq.classic-reactive.version}</version>
    </dependency>
    <dependency>
      <groupId>software.amazon.awssdk</groupId>
      <artifactId>s3</artifactId>
      <version>${aws.sdk.version}</version>
    </dependency>

    <!-- logging see http://www.slf4j.org/legacy.html -->
    <!-- The RMB runtime defines usage of log4j2 for for vert.x logging interface -->
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-slf4j2-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.apache.logging.log4j</groupId>
      <artifactId>log4j-jul</artifactId>
    </dependency>

    <!-- test dependencies -->
    <!-- vertx for junit5 -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-unit</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.rest-assured</groupId>
      <artifactId>rest-assured</artifactId>
      <version>${restassured.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.platform</groupId>
      <artifactId>junit-platform-runner</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-junit-jupiter</artifactId>
      <version>${mockito-junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>mockserver</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mock-server</groupId>
      <artifactId>mockserver-client-java</artifactId>
      <version>${mockserver-client-java.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-osgi</artifactId>
      <version>${jaxb-osgi.version}</version>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>postgres-testing</artifactId>
      <version>${raml-module-builder.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
      <version>${postgres.version}</version>
    </dependency>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>${lombok.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>generate-marc-utils</artifactId>
      <version>${generate-marc-utils-version}</version>
      <type>jar</type>
      <exclusions>
        <exclusion>
          <groupId>com.google.guava</groupId>
          <artifactId>guava</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.ben-manes.caffeine</groupId>
      <artifactId>caffeine</artifactId>
      <version>3.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.folio</groupId>
      <artifactId>folio-s3-client</artifactId>
      <version>${folio-s3-client.version}</version>
    </dependency>

    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
      <version>${jaxb-api.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.xml.bind</groupId>
      <artifactId>jaxb-impl</artifactId>
      <version>${jaxb-impl.version}</version>
    </dependency>
  </dependencies>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <plugins>

      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.12.1</version>
        <configuration>
          <compilerArgument>-Xlint:unchecked</compilerArgument>
          <encoding>${project.build.sourceEncoding}</encoding>
          <release>17</release>
          <parameters>true</parameters>
        </configuration>
        <executions>
          <execution>
            <id>default-compile</id>
            <phase>process-sources</phase>
          </execution>
          <execution>
            <id>build-generated-code</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.0.0</version>
        <executions>
          <execution>
            <id>add_generated_sources_folder</id>
            <goals>
              <goal>add-source</goal>
            </goals>
            <phase>initialize</phase>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/raml-jaxrs</source>
                <source>${project.build.directory}/generated-sources/jooq</source>
              </sources>
            </configuration>
          </execution>
          <execution>
            <id>reserve-db-port</id>
            <phase>initialize</phase>
            <goals>
              <goal>reserve-network-port</goal>
            </goals>
            <configuration>
              <portNames>
                <portName>db.port</portName>
              </portNames>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.folio</groupId>
        <artifactId>domain-models-maven-plugin</artifactId>
        <version>${raml-module-builder.version}</version>
        <executions>
          <execution>
            <id>generate_interfaces</id>
            <goals>
              <goal>java</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <!--
          Until version 1.11.1 is released into Maven Central by org.codehaus.mojo use the snapshot build instead:
          https://github.com/mojohaus/aspectj-maven-plugin/issues/24#issuecomment-419077658
          So that, this dependency group can be used alternatively:

          <groupId>com.github.m50d</groupId>
              instead of
          <groupId>org.codehaus.mojo</groupId>
        -->
        <groupId>com.nickwongdev</groupId>
        <artifactId>aspectj-maven-plugin</artifactId>
        <version>1.12.6</version>
        <configuration>
          <complianceLevel>11</complianceLevel>
          <verbose>true</verbose>
          <showWeaveInfo>false</showWeaveInfo>
          <source>${maven.compiler.source}</source>
          <target>${maven.compiler.target}</target>
          <complianceLevel>${maven.compiler.target}</complianceLevel>
          <encoding>${project.build.sourceEncoding}</encoding>
          <includes>
            <include>**/impl/*.java</include>
            <include>**/*.aj</include>
          </includes>
          <aspectDirectory>src/main/java/org/folio/rest/annotations</aspectDirectory>
          <XaddSerialVersionUID>true</XaddSerialVersionUID>
          <showWeaveInfo>true</showWeaveInfo>
          <aspectLibraries>
            <aspectLibrary>
              <groupId>org.folio</groupId>
              <artifactId>domain-models-api-aspects</artifactId>
            </aspectLibrary>
          </aspectLibraries>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
          <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjtools</artifactId>
            <version>${aspectj.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/classes/apidocs/raml</outputDirectory>
              <resources>
                <resource>
                  <directory>${ramlfiles_path}</directory>
                  <excludes>
                    <exclude>**/*.xjb</exclude>
                  </excludes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>filter-descriptor-inputs</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/descriptors</directory>
                  <include>*Descriptor*-template.json</include>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Replace the baseUri and the protocols in the RAMLs that have been copied to
      apidocs directory so that they can be used via the local html api console. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.8</version>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <configuration>
              <target if="http.port">
                <replace token="baseUri: https://github.com/folio-org/mod-oai-pmh" value="baseUri: http://localhost:${http.port}" dir="${basedir}/target/classes/apidocs/raml">
                  <include name="**/*.raml" />
                </replace>
                <replace token="protocols: [ HTTP, HTTPS ]" value="protocols: [ HTTP ]" dir="${basedir}/target/classes/apidocs/raml">
                  <include name="**/*.raml" />
                </replace>
              </target>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.coderplus.maven.plugins</groupId>
        <artifactId>copy-rename-maven-plugin</artifactId>
        <version>1.0.1</version>
        <executions>
          <execution>
            <id>rename-descriptor-outputs</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>rename</goal>
            </goals>
            <configuration>
              <fileSets>
                <fileSet>
                  <sourceFile>${project.build.directory}/ModuleDescriptor-template.json</sourceFile>
                  <destinationFile>${project.build.directory}/ModuleDescriptor.json</destinationFile>
                </fileSet>
                <fileSet>
                  <sourceFile>${project.build.directory}/DeploymentDescriptor-template.json</sourceFile>
                  <destinationFile>${project.build.directory}/DeploymentDescriptor.json</destinationFile>
                </fileSet>
              </fileSets>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>properties-maven-plugin</artifactId>
        <version>1.0.0</version>
        <executions>
          <execution>
            <id>set-system-properties</id>
            <goals>
              <goal>set-system-properties</goal>
            </goals>
            <configuration>
              <properties>
                <property>
                  <name>log4j2.configuration</name>
                  <value>${project.baseUri}src/main/resources/log4j2.properties</value>
                </property>
              </properties>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.2.2</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                  <manifestEntries>
                    <Main-Class>org.folio.rest.RestLauncher</Main-Class>
                    <Main-Verticle>org.folio.rest.RestVerticle</Main-Verticle>
                    <Multi-Release>true</Multi-Release>
                  </manifestEntries>
                </transformer>
              </transformers>
              <filters>
                <filter>
                  <artifact>*:*</artifact>
                  <excludes>
                    <exclude>**/Log4j2Plugins.dat</exclude>
                    <exclude>META-INF/*.SF</exclude>
                    <exclude>META-INF/*.DSA</exclude>
                    <exclude>META-INF/*.RSA</exclude>
                  </excludes>
                </filter>
              </filters>
              <artifactSet />
              <outputFile>${project.build.directory}/${project.artifactId}-fat.jar</outputFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jvnet.jaxb2.maven2</groupId>
        <artifactId>maven-jaxb2-plugin</artifactId>
        <version>0.15.3</version>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <extension>true</extension>
          <schemaDirectory>ramls/schemas</schemaDirectory>
          <schemaIncludes>
            <include>OAI-PMH.xsd</include>
            <include>oai-identifier.xsd</include>
            <include>oai_dc.xsd</include>
            <include>MARC21slim.xsd</include>
          </schemaIncludes>
          <bindingDirectory>ramls/schemas</bindingDirectory>
          <bindingIncludes>
            <include>bindings.xjb</include>
          </bindingIncludes>
          <generateDirectory>target/generated-sources/jaxb</generateDirectory>
          <args>
            <arg>-Xfluent-api</arg>
            <arg>-Xannotate</arg>
            <arg>-Xequals</arg>
            <arg>-XhashCode</arg>
            <arg>-Xfixed-value</arg>
          </args>
          <plugins>
            <plugin>
              <groupId>org.jvnet.jaxb2_commons</groupId>
              <artifactId>jaxb2-fluent-api</artifactId>
              <version>3.0</version>
            </plugin>
            <plugin>
              <groupId>org.jvnet.jaxb2_commons</groupId>
              <artifactId>jaxb2-basics-annotate</artifactId>
              <version>1.1.0</version>
            </plugin>
            <plugin>
              <groupId>org.jvnet.jaxb2_commons</groupId>
              <artifactId>jaxb2-basics</artifactId>
              <version>${jaxb2-basics.version}</version>
            </plugin>
            <plugin>
              <groupId>com.github.fbdo</groupId>
              <artifactId>jaxb2-fixed-value</artifactId>
              <version>1.2</version>
            </plugin>
          </plugins>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-release-plugin</artifactId>
        <version>2.5.3</version>
        <configuration>
          <preparationGoals>clean verify</preparationGoals>
          <tagNameFormat>v@{project.version}</tagNameFormat>
          <pushChanges>false</pushChanges>
          <localCheckout>true</localCheckout>
        </configuration>
      </plugin>

      <!-- Enable jaxb validation for unit tests by default. The implementation by default enables validation.
           Setting here as well just in case because apparently the default behavior might be changed. -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>
        <configuration>
          <forkedProcessExitTimeoutInSeconds>300</forkedProcessExitTimeoutInSeconds>
          <systemPropertyVariables>
            <jaxb.marshaller.enableValidation>true</jaxb.marshaller.enableValidation>
            <vertx.logger-delegate-factory-class-name>io.vertx.core.logging.Log4j2LogDelegateFactory</vertx.logger-delegate-factory-class-name>
          </systemPropertyVariables>
          <useSystemClassLoader>false</useSystemClassLoader>
        </configuration>
      </plugin>

      <plugin>
        <groupId>io.fabric8</groupId>
        <artifactId>docker-maven-plugin</artifactId>
        <version>0.43.0</version>
        <configuration>
          <images>
            <image>
              <alias>db</alias>
              <name>${postgres.image}</name>
              <run>
                <privileged>true</privileged>
                <containerNamePattern>%n-%t</containerNamePattern>
                <env>
                  <POSTGRES_DB>postgres</POSTGRES_DB>
                  <POSTGRES_USER>postgres</POSTGRES_USER>
                  <POSTGRES_PASSWORD>postgres</POSTGRES_PASSWORD>
                </env>
                <ports>
                  <port>${db.port}:5432</port>
                  <port>+docker.host.address:${db.port}:5432</port>
                </ports>
                <wait>
                  <log>(?s)ready to accept connections.*ready to accept connections</log>
                  <time>90000</time>
                </wait>
              </run>
            </image>
          </images>
        </configuration>
        <executions>
          <execution>
            <id>start-pgsql</id>
            <phase>initialize</phase>
            <goals>
              <goal>start</goal>
            </goals>
          </execution>
          <execution>
            <id>stop-pgsql</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>stop</goal>
              <goal>remove</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.liquibase</groupId>
        <artifactId>liquibase-maven-plugin</artifactId>
        <version>3.9.0</version>
        <configuration>
          <changeLogFile>src/main/resources/liquibase/tenant/changelog.xml</changeLogFile>
          <driver>org.postgresql.Driver</driver>
          <url>jdbc:postgresql://${docker.host.address}:${db.port},${docker.container.db.ip}:5432/postgres</url>
          <username>postgres</username>
          <password>postgres</password>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgres.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>create-schema</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>update</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jooq</groupId>
        <artifactId>jooq-codegen-maven</artifactId>
        <version>${jooq.version}</version>
        <executions>
          <execution>
            <id>jooq-generate</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>generate</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgres.version}</version>
          </dependency>
          <dependency>
            <groupId>io.github.jklingsporn</groupId>
            <artifactId>vertx-jooq-generate</artifactId>
            <version>${vertx-jooq.generator.version}</version>
          </dependency>
          <dependency>
            <groupId>org.apache.maven</groupId>
            <artifactId>maven-core</artifactId>
            <version>3.3.9</version>
          </dependency>
        </dependencies>
        <configuration>
          <jdbc>
            <driver>org.postgresql.Driver</driver>
            <url>jdbc:postgresql://${docker.host.address}:${db.port},${docker.container.db.ip}:5432/postgres</url>
            <user>postgres</user>
            <password>postgres</password>
          </jdbc>
          <generator>
            <name>io.github.jklingsporn.vertx.jooq.generate.classic.ClassicReactiveVertxGenerator</name>
            <database>
              <name>org.jooq.meta.postgres.PostgresDatabase</name>
              <includes>.*</includes>
              <excludes>
                databasechangelog|databasechangeloglock
              </excludes>
              <inputSchema>public</inputSchema>
              <outputSchemaToDefault>true</outputSchemaToDefault>
              <unsignedTypes>false</unsignedTypes>
              <forcedTypes />
            </database>
            <generate>
              <daos>true</daos>
              <fluentSetters>true</fluentSetters>
            </generate>
            <target>
              <packageName>org.folio.rest.jooq</packageName>
            </target>
            <strategy>
              <name>io.github.jklingsporn.vertx.jooq.generate.VertxGeneratorStrategy</name>
            </strategy>
          </generator>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>2.22.2</version>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>
