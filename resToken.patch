diff --git a/src/main/java/org/folio/oaipmh/Constants.java b/src/main/java/org/folio/oaipmh/Constants.java
index eb8af01..197563d 100644
--- a/src/main/java/org/folio/oaipmh/Constants.java
+++ b/src/main/java/org/folio/oaipmh/Constants.java
@@ -66,6 +66,7 @@ public final class Constants {
   public static final String RESUMPTION_TOKEN_FLOW_ERROR = "There were substantial changes to the repository and continuing may result in missing records.";
   public static final String LIST_NO_REQUIRED_PARAM_ERROR = "Missing required parameters: metadataPrefix";
   public static final String LIST_ILLEGAL_ARGUMENTS_ERROR = "Verb '%s', argument 'resumptionToken' is exclusive, no others maybe specified with it.";
+  public static final String INVALID_RESUMPTION_TOKEN = "Verb '%s', argument resumptionToken is invalid";
   public static final String NO_RECORD_FOUND_ERROR = "There is no any record found matching search criteria";
   public static final String BAD_DATESTAMP_FORMAT_ERROR = "Bad datestamp format for '%s=%s' argument.";
   public static final String RECORD_METADATA_PREFIX_PARAM_ERROR = "The request is missing required arguments. There is no metadataPrefix.";
diff --git a/src/main/java/org/folio/oaipmh/Request.java b/src/main/java/org/folio/oaipmh/Request.java
index 6a77423..abda8ca 100644
--- a/src/main/java/org/folio/oaipmh/Request.java
+++ b/src/main/java/org/folio/oaipmh/Request.java
@@ -214,33 +214,28 @@ public class Request {
    *
    * @return true if the request was restored, false otherwise.
    */
-  public boolean restoreFromResumptionToken() {
-    if (oaiRequest.getResumptionToken() == null || !isResumptionTokenExclusive()) {
-      return false;
-    }
-
+  public boolean isResumptionTokenParsableAndValid() {
+    try {
     String resumptionToken = new String(Base64.getUrlDecoder().decode(oaiRequest.getResumptionToken()),
       StandardCharsets.UTF_8);
 
     Map<String, String> params;
-    try {
       params = URLEncodedUtils
         .parse(resumptionToken, UTF_8, PARAMETER_SEPARATOR).stream()
         .collect(toMap(NameValuePair::getName, NameValuePair::getValue));
+
+      restoredOaiRequest = new RequestType();
+      restoredOaiRequest.setMetadataPrefix(params.get(METADATA_PREFIX_PARAM));
+      restoredOaiRequest.setFrom(params.get(FROM_PARAM));
+      restoredOaiRequest.setUntil(params.get(UNTIL_PARAM));
+      restoredOaiRequest.setSet(params.get(SET_PARAM));
+      this.offset = Integer.parseInt(params.get(OFFSET_PARAM));
+      final String value = params.get(TOTAL_RECORDS_PARAM);
+      this.totalRecords = value == null ? 0 : Integer.parseInt(value);
+      this.nextRecordId = params.get(NEXT_RECORD_ID_PARAM);
     } catch (Exception e) {
-      throw new IllegalArgumentException(e.getMessage());
+      return false;
     }
-
-    restoredOaiRequest = new RequestType();
-    restoredOaiRequest.setMetadataPrefix(params.get(METADATA_PREFIX_PARAM));
-    restoredOaiRequest.setFrom(params.get(FROM_PARAM));
-    restoredOaiRequest.setUntil(params.get(UNTIL_PARAM));
-    restoredOaiRequest.setSet(params.get(SET_PARAM));
-    this.offset = Integer.parseInt(params.get(OFFSET_PARAM));
-    final String value = params.get(TOTAL_RECORDS_PARAM);
-    this.totalRecords = value == null ? 0 : Integer.parseInt(value);
-    this.nextRecordId = params.get(NEXT_RECORD_ID_PARAM);
-
     return true;
   }
 
@@ -285,20 +280,4 @@ public class Request {
       builder.append(name).append(PARAMETER_VALUE_SEPARATOR).append(value);
     }
   }
-
-  /**
-   * Checks if the resumptionToken is provided exclusively by comparing this request
-   * with one that only contains the resumptionToken.
-   * @return true is resumptionToken is exclusive, false otherwise
-   */
-  private boolean isResumptionTokenExclusive() {
-    Request exclusiveParamRequest = Request.builder()
-      .okapiHeaders(getOkapiHeaders())
-      .resumptionToken(oaiRequest.getResumptionToken())
-      .baseURL(oaiRequest.getValue())
-      .verb(oaiRequest.getVerb())
-      .build();
-
-    return exclusiveParamRequest.getOaiRequest().equals(oaiRequest);
-  }
 }
diff --git a/src/main/java/org/folio/oaipmh/helpers/AbstractGetRecordsHelper.java b/src/main/java/org/folio/oaipmh/helpers/AbstractGetRecordsHelper.java
index e7f8aee..659c256 100644
--- a/src/main/java/org/folio/oaipmh/helpers/AbstractGetRecordsHelper.java
+++ b/src/main/java/org/folio/oaipmh/helpers/AbstractGetRecordsHelper.java
@@ -50,13 +50,6 @@ public abstract class AbstractGetRecordsHelper extends AbstractHelper {
   public Future<Response> handle(Request request, Context ctx) {
     Promise<Response> promise = Promise.promise();
     try {
-      if (request.getResumptionToken() != null && !request.restoreFromResumptionToken()) {
-        ResponseHelper responseHelper = getResponseHelper();
-        OAIPMH oaipmh = responseHelper.buildOaipmhResponseWithErrors(request, BAD_ARGUMENT, LIST_ILLEGAL_ARGUMENTS_ERROR);
-        promise.complete(responseHelper.buildFailureResponse(oaipmh, request));
-        return promise.future();
-      }
-
       List<OAIPMHerrorType> errors = validateRequest(request);
       if (!errors.isEmpty()) {
         return buildResponseWithErrors(request, promise, errors);
diff --git a/src/main/java/org/folio/oaipmh/helpers/GetOaiIdentifiersHelper.java b/src/main/java/org/folio/oaipmh/helpers/GetOaiIdentifiersHelper.java
index 59198b0..ec8cf4f 100644
--- a/src/main/java/org/folio/oaipmh/helpers/GetOaiIdentifiersHelper.java
+++ b/src/main/java/org/folio/oaipmh/helpers/GetOaiIdentifiersHelper.java
@@ -38,14 +38,7 @@ public class GetOaiIdentifiersHelper extends AbstractHelper {
     Promise<javax.ws.rs.core.Response> promise = Promise.promise();
     try {
       ResponseHelper responseHelper = getResponseHelper();
-      // 1. Restore request from resumptionToken if present
-      if (request.getResumptionToken() != null && !request.restoreFromResumptionToken()) {
-        OAIPMH oai = responseHelper.buildOaipmhResponseWithErrors(request, BAD_ARGUMENT, LIST_ILLEGAL_ARGUMENTS_ERROR);
-        promise.complete(getResponseHelper().buildFailureResponse(oai, request));
-        return promise.future();
-      }
-
-      // 2. Validate request
+      // 1. Validate request
       List<OAIPMHerrorType> errors = validateListRequest(request);
       if (!errors.isEmpty()) {
         OAIPMH oai;
@@ -61,11 +54,11 @@ public class GetOaiIdentifiersHelper extends AbstractHelper {
       HttpClientInterface httpClient = getOkapiClient(request.getOkapiHeaders());
       final String instanceEndpoint = storageHelper.buildRecordsEndpoint(request, isDeletedRecordsEnabled(request));
 
-      // 3. Search for instances
+      // 2. Search for instances
       VertxCompletableFuture.from(ctx, httpClient.request(instanceEndpoint, request.getOkapiHeaders(), false))
-        // 4. Verify response and build list of identifiers
+        // 3. Verify response and build list of identifiers
         .thenApply(response -> buildListIdentifiers(request, response))
-        // 5. Build final response to client (potentially blocking operation thus running on worker thread)
+        // 4. Build final response to client (potentially blocking operation thus running on worker thread)
         .thenCompose(oai -> supplyBlockingAsync(ctx, () -> buildResponse(oai, request)))
         .thenAccept(promise::complete)
         .exceptionally(e -> {
diff --git a/src/main/java/org/folio/oaipmh/processors/MarcWithHoldingsRequestHelper.java b/src/main/java/org/folio/oaipmh/processors/MarcWithHoldingsRequestHelper.java
index 997c60d..ab70d51 100644
--- a/src/main/java/org/folio/oaipmh/processors/MarcWithHoldingsRequestHelper.java
+++ b/src/main/java/org/folio/oaipmh/processors/MarcWithHoldingsRequestHelper.java
@@ -87,7 +87,7 @@ public class MarcWithHoldingsRequestHelper extends AbstractHelper {
     Promise<Response> promise = Promise.promise();
     try {
       String resumptionToken = request.getResumptionToken();
-      if (resumptionToken != null && !request.restoreFromResumptionToken()) {
+      if (resumptionToken != null && !request.isResumptionTokenParsableAndValid()) {
         ResponseHelper responseHelper = getResponseHelper();
         OAIPMH oaipmh = getResponseHelper()
           .buildOaipmhResponseWithErrors(request, BAD_ARGUMENT, LIST_ILLEGAL_ARGUMENTS_ERROR);
diff --git a/src/main/java/org/folio/oaipmh/validator/VerbValidator.java b/src/main/java/org/folio/oaipmh/validator/VerbValidator.java
index c73754d..149668e 100644
--- a/src/main/java/org/folio/oaipmh/validator/VerbValidator.java
+++ b/src/main/java/org/folio/oaipmh/validator/VerbValidator.java
@@ -1,8 +1,11 @@
 package org.folio.oaipmh.validator;
 
 import static java.lang.String.format;
+import static org.folio.oaipmh.Constants.INVALID_RESUMPTION_TOKEN;
+import static org.folio.oaipmh.Constants.LIST_ILLEGAL_ARGUMENTS_ERROR;
 import static org.folio.oaipmh.Constants.VERB_PARAM;
 import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_ARGUMENT;
+import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_RESUMPTION_TOKEN;
 import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_VERB;
 
 import java.util.ArrayList;
@@ -14,6 +17,7 @@ import java.util.Set;
 import java.util.stream.Collectors;
 
 import org.apache.commons.lang3.StringUtils;
+import org.folio.oaipmh.Request;
 import org.folio.oaipmh.domain.Verb;
 import org.openarchives.oai._2.OAIPMHerrorType;
 
@@ -31,13 +35,13 @@ public class VerbValidator {
    * @param requestParams - map with request parameters
    * @return list of errors.
    */
-  public List<OAIPMHerrorType> validate(Object object, Map<String, String> requestParams) {
+  public List<OAIPMHerrorType> validate(Object object, Map<String, String> requestParams, Request request) {
     List<OAIPMHerrorType> errors = new ArrayList<>();
     String verbName = Objects.nonNull(object) ? object.toString() : "empty";
     Verb verb = Verb.fromName(verbName);
     if (Objects.nonNull(verb)) {
       validateRequiredParams(requestParams, verb, errors);
-      validateExclusiveParam(verb, requestParams, errors);
+      validateExclusiveParam(verb, requestParams, request, errors);
       validateIllegalParams(verb, requestParams, errors);
     } else {
       errors.add(new OAIPMHerrorType().withCode(BAD_VERB)
@@ -51,11 +55,13 @@ public class VerbValidator {
    * will be added to error list.
    *
    * @param verb   - verb
-   * @param ctx    - vertx context
+   * @param requestParams    - request parameters
+   * @param request - oai-pmh request
    * @param errors - list of errors
    */
-  private void validateExclusiveParam(Verb verb, Map<String, String> requestParams, List<OAIPMHerrorType> errors) {
-    if (verb.getExclusiveParam() != null && requestParams.get(verb.getExclusiveParam()) != null) {
+  private void validateExclusiveParam(Verb verb, Map<String, String> requestParams, Request request, List<OAIPMHerrorType> errors) {
+    String resumptionToken = requestParams.get(verb.getExclusiveParam());
+    if (verb.getExclusiveParam() != null && resumptionToken != null) {
       requestParams.keySet()
         .stream()
         .filter(p -> !verb.getExcludedParams().contains(p))
@@ -67,13 +73,19 @@ public class VerbValidator {
               .withValue(format(EXCLUSIVE_PARAM_ERROR_MESSAGE, verb.name(), verb.getExclusiveParam())));
           }
         });
+      if (!request.isResumptionTokenParsableAndValid()) {
+        OAIPMHerrorType error = new OAIPMHerrorType()
+          .withCode(BAD_RESUMPTION_TOKEN)
+          .withValue(format(INVALID_RESUMPTION_TOKEN, verb.name()));
+        errors.add(error);
+      }
     }
   }
 
   /**
    * Verifies that any of the required parameters is not missing.
    *
-   * @param context - vertx context
+   * @param requestParams - vertx context
    * @param verb    - request verb
    * @param errors  - errors list
    */
diff --git a/src/main/java/org/folio/rest/impl/OaiPmhImpl.java b/src/main/java/org/folio/rest/impl/OaiPmhImpl.java
index 56d48a3..4fa879e 100644
--- a/src/main/java/org/folio/rest/impl/OaiPmhImpl.java
+++ b/src/main/java/org/folio/rest/impl/OaiPmhImpl.java
@@ -5,6 +5,7 @@ import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;
 import static org.folio.oaipmh.Constants.FROM_PARAM;
 import static org.folio.oaipmh.Constants.GENERIC_ERROR_MESSAGE;
 import static org.folio.oaipmh.Constants.IDENTIFIER_PARAM;
+import static org.folio.oaipmh.Constants.LIST_ILLEGAL_ARGUMENTS_ERROR;
 import static org.folio.oaipmh.Constants.METADATA_PREFIX_PARAM;
 import static org.folio.oaipmh.Constants.OKAPI_TENANT;
 import static org.folio.oaipmh.Constants.REPOSITORY_BASE_URL;
@@ -15,6 +16,7 @@ import static org.folio.oaipmh.Constants.SET_PARAM;
 import static org.folio.oaipmh.Constants.UNTIL_PARAM;
 import static org.folio.oaipmh.helpers.RepositoryConfigurationUtil.getBooleanProperty;
 import static org.folio.oaipmh.helpers.RepositoryConfigurationUtil.getProperty;
+import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_ARGUMENT;
 import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_RESUMPTION_TOKEN;
 import static org.openarchives.oai._2.VerbType.GET_RECORD;
 import static org.openarchives.oai._2.VerbType.IDENTIFY;
@@ -114,7 +116,7 @@ public class OaiPmhImpl implements Oai {
           addParamToMapIfNotEmpty(SET_PARAM, set, requestParams);
           addParamToMapIfNotEmpty(METADATA_PREFIX_PARAM, metadataPrefix, requestParams);
 
-          List<OAIPMHerrorType> errors = validator.validate(verb, requestParams);
+          List<OAIPMHerrorType> errors = validator.validate(verb, requestParams, request);
 
           if (isNotEmpty(errors)) {
             ResponseHelper responseHelper = ResponseHelper.getInstance();
@@ -124,9 +126,7 @@ public class OaiPmhImpl implements Oai {
             VerbType verbType = VerbType.fromValue(verb);
             VerbHelper verbHelper;
 
-            String targetMetadataPrefix = getMetadataPrefixFromResumtionToken(request, metadataPrefix, t -> {
-              asyncResultHandler.handle(getFutureWithErrorResponse(t, request));
-            });
+            String targetMetadataPrefix = request.getMetadataPrefix();
 
             if(verbType.equals(LIST_RECORDS) && MetadataPrefix.MARC21WITHHOLDINGS.getName().equals(targetMetadataPrefix)) {
               //in 2020Q3 change it common approach for all helpers
@@ -155,14 +155,18 @@ public class OaiPmhImpl implements Oai {
     };
   }
 
-  private String getMetadataPrefixFromResumtionToken(Request request, String metadataPrefix, Handler<Throwable> errorHandler) {
+  private String getMetadataPrefixFromResumtionToken(Request request, String metadataPrefix, Handler<AsyncResult<Response>> asyncResultHandler) {
     String targetMetadataPrefix = metadataPrefix;
-    try {
-      if (request.restoreFromResumptionToken()) {
+    if (request.getResumptionToken() != null) {
+      if(request.isResumptionTokenParsableAndValid()) {
         targetMetadataPrefix = request.getMetadataPrefix();
+      } else {
+        ResponseHelper responseHelper = ResponseHelper.getInstance();
+        OAIPMH oaipmh = responseHelper.buildOaipmhResponseWithErrors(request, BAD_ARGUMENT, LIST_ILLEGAL_ARGUMENTS_ERROR);
+        asyncResultHandler.handle(Future.succeededFuture(responseHelper.buildFailureResponse(oaipmh, request)));
+        return null;
       }
-    } catch (Exception e) {
-      errorHandler.handle(e);
+      targetMetadataPrefix = request.getMetadataPrefix();
     }
     return targetMetadataPrefix;
   }
diff --git a/src/test/java/org/folio/oaipmh/validator/VerbValidatorTest.java b/src/test/java/org/folio/oaipmh/validator/VerbValidatorTest.java
index f1d882e..4437861 100644
--- a/src/test/java/org/folio/oaipmh/validator/VerbValidatorTest.java
+++ b/src/test/java/org/folio/oaipmh/validator/VerbValidatorTest.java
@@ -11,6 +11,7 @@ import static org.folio.oaipmh.Constants.RESUMPTION_TOKEN_PARAM;
 import static org.folio.oaipmh.Constants.SET_PARAM;
 import static org.junit.Assert.assertTrue;
 import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_ARGUMENT;
+import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_RESUMPTION_TOKEN;
 import static org.openarchives.oai._2.OAIPMHerrorcodeType.BAD_VERB;
 
 import java.time.LocalDateTime;
@@ -21,6 +22,8 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 
 import org.apache.commons.lang3.StringUtils;
+import org.folio.oaipmh.Constants;
+import org.folio.oaipmh.Request;
 import org.folio.oaipmh.domain.Verb;
 import org.junit.After;
 import org.junit.jupiter.api.Test;
@@ -47,12 +50,16 @@ class VerbValidatorTest {
   private static final String RESUMPTION_TOKEN_TEST_VALUE = "resumptionTokenTestValue";
   private static final String EXCLUSIVE_PARAM_ERROR_MESSAGE = "Verb '%s', argument '%s' is exclusive, no others maybe specified with it.";
   private static final String TEST_VALUE = "test";
+  private static final String VALID_RESUMPTION_TOKEN = "offset=5&metadataPrefix=marc21&totalRecords=100";
+  private static final String INVALID_RESUMPTION_TOKEN = "abc";
 
   private Map<String, String> requestParams = new HashMap<>();
+  private Request request = Request.builder()
+  .okapiHeaders(requestParams)
+  .build();
 
   private VerbValidator validator = new VerbValidator();
 
-
   @After
   public void tearDown() {
     requestParams.clear();
@@ -60,14 +67,14 @@ class VerbValidatorTest {
 
   @Test
   void shouldAddErrorWhenRequestedVerbIsNotImplemented() {
-    List<OAIPMHerrorType> errors = validator.validate(UNKNOWN_VERB, requestParams);
+    List<OAIPMHerrorType> errors = validator.validate(UNKNOWN_VERB, requestParams, request);
     assertTrue(isNotEmpty(errors));
     verifyContainsError(errors, BAD_VERB, format(VERB_NOT_IMPLEMENTED_ERROR_MESSAGE, UNKNOWN_VERB));
   }
 
   @Test
   void shouldAddErrorWhenRequestedVerbIsNull() {
-    List<OAIPMHerrorType> errors = validator.validate(null, requestParams);
+    List<OAIPMHerrorType> errors = validator.validate(null, requestParams, request);
     assertTrue(isNotEmpty(errors));
     verifyContainsError(errors, BAD_VERB, format(VERB_NOT_IMPLEMENTED_ERROR_MESSAGE, DEFAULT_NAME_OF_NULL_VERB));
   }
@@ -75,7 +82,7 @@ class VerbValidatorTest {
   @ParameterizedTest()
   @MethodSource("getVerbsWithRequiredParams")
   void shouldAddErrorWhenRequiredParametersIsMissed(Verb verb) {
-    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams);
+    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams, request);
     String missedRequiredParams = getRequiredParamsAsString(verb);
 
     assertTrue(isNotEmpty(errors));
@@ -85,23 +92,34 @@ class VerbValidatorTest {
   @ParameterizedTest
   @MethodSource("getVerbsWithExclusiveParams")
   void shouldAddErrorWhenParametersContainExclusiveAndAnotherOneWithIt(Verb verb) {
-    requestParams.put(RESUMPTION_TOKEN_PARAM, RESUMPTION_TOKEN_TEST_VALUE);
+    requestParams.put(RESUMPTION_TOKEN_PARAM, VALID_RESUMPTION_TOKEN);
     requestParams.put(FROM_PARAM, LocalDateTime.now()
       .format(ISO_UTC_DATE_ONLY));
 
-    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams);
+    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams, request);
 
     assertTrue(isNotEmpty(errors));
     verifyContainsError(errors, BAD_ARGUMENT, format(EXCLUSIVE_PARAM_ERROR_MESSAGE, verb.name(), verb.getExclusiveParam()));
   }
 
+  @ParameterizedTest
+  @MethodSource("getVerbsWithExclusiveParams")
+  void shouldAddErrorWhenExclusiveParameterIsInvalid(Verb verb) {
+    requestParams.put(RESUMPTION_TOKEN_PARAM, INVALID_RESUMPTION_TOKEN);
+
+    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams, request);
+
+    assertTrue(isNotEmpty(errors));
+    verifyContainsError(errors, BAD_RESUMPTION_TOKEN, format(Constants.INVALID_RESUMPTION_TOKEN, verb.name()));
+  }
+
   @ParameterizedTest
   @EnumSource(Verb.class)
   void shouldAddErrorWhenRequestParametersContainIllegalParameter(Verb verb) {
     setUpRequiredRequestParametersForVerb(verb);
     requestParams.put(getIllegalParameterForVerb(verb), TEST_VALUE);
 
-    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams);
+    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams, request);
 
     assertTrue(isNotEmpty(errors));
     verifyContainsError(errors, BAD_ARGUMENT,
@@ -113,7 +131,7 @@ class VerbValidatorTest {
   void shouldReturnEmptyErrorListWhenParametersAreValid(Verb verb) {
     setUpRequiredRequestParametersForVerb(verb);
 
-    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams);
+    List<OAIPMHerrorType> errors = validator.validate(verb.toString(), requestParams, request);
 
     assertTrue(isEmpty(errors));
   }
diff --git a/src/test/java/org/folio/rest/impl/OaiPmhImplTest.java b/src/test/java/org/folio/rest/impl/OaiPmhImplTest.java
index 8699003..82c99e0 100644
--- a/src/test/java/org/folio/rest/impl/OaiPmhImplTest.java
+++ b/src/test/java/org/folio/rest/impl/OaiPmhImplTest.java
@@ -769,7 +769,7 @@ class OaiPmhImplTest {
       .param(METADATA_PREFIX_PARAM, metadataPrefix)
       .param(RESUMPTION_TOKEN_PARAM, resumptionToken);
 
-    OAIPMH oaipmh = verifyResponseWithErrors(request, verb, 400, 1);
+    OAIPMH oaipmh = verifyResponseWithErrors(request, verb, 400, 2);
 
     assertThat(oaipmh.getRequest().getResumptionToken(), equalTo(resumptionToken));
     assertThat(oaipmh.getRequest().getMetadataPrefix(), equalTo(metadataPrefix));
