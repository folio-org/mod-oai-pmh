package org.folio.oaipmh.client;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import org.folio.rest.tools.utils.VertxUtils;

import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.buffer.Buffer;
import io.vertx.ext.web.client.HttpResponse;
import io.vertx.ext.web.client.WebClient;
import io.vertx.ext.web.client.WebClientOptions;

//TODO Should be replaced with the ConfigurationsClient from mod-configuration-client
// when it's upgraded to RMD version 32 and Vert.x version 4
public class ConfigurationsClient {

  private static final String UTF_8 = "UTF-8";

  private String tenantId;
  private String token;
  private String okapiUrl;
  private WebClientOptions options;
  private WebClient httpClient;

  public ConfigurationsClient(String okapiUrl, String tenantId, String token, boolean keepAlive, int connTO, int idleTO) {
    // Auto-generated code
    // - generated by       org.folio.rest.tools.ClientGenerator
    // - generated based on org.folio.rest.jaxrs.resource.ConfigurationsResource
    this.tenantId = tenantId;
    this.token = token;
    this.okapiUrl = okapiUrl;
    options = new WebClientOptions();
    options.setLogActivity(true);
    options.setKeepAlive(keepAlive);
    options.setConnectTimeout(connTO);
    options.setIdleTimeout(idleTO);
    httpClient = WebClient.create(VertxUtils.getVertxFromContextOrNew(), options);
  }

  public ConfigurationsClient(String okapiUrl, String tenantId, String token) {
    // Auto-generated code
    // - generated by       org.folio.rest.tools.ClientGenerator
    // - generated based on org.folio.rest.jaxrs.resource.ConfigurationsResource
    this(okapiUrl, tenantId, token, true, 2000, 5000);
  }

  public ConfigurationsClient(String okapiUrl, String tenantId, String token, boolean keepAlive) {
    // Auto-generated code
    // - generated by       org.folio.rest.tools.ClientGenerator
    // - generated based on org.folio.rest.jaxrs.resource.ConfigurationsResource
    this(okapiUrl, tenantId, token, keepAlive, 2000, 5000);
  }

  /**
   * Service endpoint "/configurations/entries"+queryParams.toString()
   *
   */
  public void getConfigurationsEntries(String query, int offset, int limit, String[] facets, String lang, Handler<AsyncResult<HttpResponse<Buffer>>> responseHandler)
    throws UnsupportedEncodingException
  {
    // Auto-generated code
    // - generated by       org.folio.rest.tools.ClientGenerator
    // - generated based on org.folio.rest.jaxrs.resource.ConfigurationsResource
    StringBuilder queryParams = new StringBuilder("?");
    if (query!= null) {
      queryParams.append("query=");
      queryParams.append(URLEncoder.encode(query, UTF_8));
      queryParams.append("&");
    }
    queryParams.append("offset=");
    queryParams.append(offset);
    queryParams.append("&");
    queryParams.append("limit=");
    queryParams.append(limit);
    queryParams.append("&");
    if (facets!= null) {
      queryParams.append("facets=");
      if(facets.getClass().isArray()){queryParams.append(String.join("&facets=",facets));}
      queryParams.append("&");
    }
    if (lang!= null) {
      queryParams.append("lang=");
      queryParams.append(URLEncoder.encode(lang, UTF_8));
      queryParams.append("&");
    }
    io.vertx.ext.web.client.HttpRequest<Buffer> request = httpClient.requestAbs(io.vertx.core.http.HttpMethod.GET, okapiUrl+"/configurations/entries"+queryParams.toString());
    request.putHeader("Accept", "application/json,text/plain");
    if (tenantId!= null) {
      request.putHeader("X-Okapi-Token", token);
      request.putHeader("x-okapi-tenant", tenantId);
    }
    if (okapiUrl!= null) {
      request.putHeader("X-Okapi-Url", okapiUrl);
    }
    request.send(responseHandler);
  }

  /**
   * Service endpoint "/configurations/entries"+queryParams.toString()
   *
   */
  public void postConfigurationsEntries(String lang, org.folio.rest.jaxrs.model.Config config, Handler<AsyncResult<HttpResponse<Buffer>>> responseHandler)
    throws Exception
  {
    // Auto-generated code
    // - generated by       org.folio.rest.tools.ClientGenerator
    // - generated based on org.folio.rest.jaxrs.resource.ConfigurationsResource
    StringBuilder queryParams = new StringBuilder("?");
    if (lang!= null) {
      queryParams.append("lang=");
      queryParams.append(URLEncoder.encode(lang, UTF_8));
      queryParams.append("&");
    }
    Buffer buffer = Buffer.buffer();
    if (config!= null) {
      buffer.appendString(org.folio.rest.tools.ClientHelpers.pojo2json(config));
    }
    io.vertx.ext.web.client.HttpRequest<Buffer> request = httpClient.requestAbs(io.vertx.core.http.HttpMethod.POST, okapiUrl+"/configurations/entries"+queryParams.toString());
    request.putHeader("Content-type", "application/json");
    request.putHeader("Accept", "application/json,text/plain");
    if (tenantId!= null) {
      request.putHeader("X-Okapi-Token", token);
      request.putHeader("x-okapi-tenant", tenantId);
    }
    if (okapiUrl!= null) {
      request.putHeader("X-Okapi-Url", okapiUrl);
    }
    request.sendBuffer(buffer, responseHandler);
  }

}
